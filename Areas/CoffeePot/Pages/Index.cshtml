@page
@model DatePot.Areas.CoffeePot.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}
<div class="fadeIn">
    <div class="row">
        <div class="col-12">
            <button type="button" class="btn btn-primary btnAddCoffeeModal" data-toggle="modal"
                data-target="#AddCoffeeModal">Add Coffee</button>
        </div>
    </div>
    <div class="row pt-4">
        <div class="col-12">
            <table id="CoffeeTable"
                class="table table-striped table-stripedCoffeePot table-borderless ClientSearchTable Coffeerow">
                <thead class="thead-darkCoffeetable">
                    <tr>
                        <th>Name</th>
                        @{
                            foreach (var itemUser in Model.Users)
                            {
                                <th>@itemUser.UserName Taste</th>
                                <th></th>
                            }
                            foreach (var itemUser in Model.Users)
                            {
                                <th>@itemUser.UserName Experience</th>
                                <th></th>
                            }
                        }
                        <th>Average Taste</th>
                        <th></th>
                        <th>Average Rating</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Coffees)
                    {
                        <tr>
                            <td>
                                @item.CoffeeName
                            </td>
                            @{
                                var ratingsExists = Model.CoffeeRatingsList.Where(x => x.CoffeeID == item.CoffeeID);
                                if (ratingsExists.Count() == 0)
                                {
                                    foreach (var itemUser in Model.Users)
                                    {
                                        <td>
                                            <input value="0" class="starRating rating-loading" data-size="xs">
                                        </td>
                                        <td>0</td>
                                        <td>
                                            <input value="0" class="starRating rating-loading" data-size="xs">
                                        </td>
                                        <td>0</td>
                                    }
                                }
                                else
                                {
                                    int emptyTasteAlreadyAdded = 0;
                                    int emptyExperienceAlreadyAdded = 0;
                                    foreach (var itemRating in Model.CoffeeRatingsList)
                                    {
                                        foreach (var itemUser in Model.Users)
                                        {
                                            var ratingsExistsForUser = Model.CoffeeRatingsList.Where(x => x.UserID == itemUser.UserID &&
                                            x.CoffeeID == item.CoffeeID);
                                            if (ratingsExistsForUser.Count() > 0)
                                            {
                                                if (itemUser.UserID == itemRating.UserID)
                                                {
                                                    if (itemRating.CoffeeID == item.CoffeeID)
                                                    {
                                                        <td>
                                                            <input value="@itemRating.Taste" class="starRating rating-loading" data-size="xs">
                                                        </td>
                                                        <td>@itemRating.Taste</td>
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (emptyTasteAlreadyAdded != 1)
                                                {
                                                    <td>
                                                        <input value="0" class="starRating rating-loading" data-size="xs">
                                                    </td>
                                                    <td>0</td>
                                                    emptyTasteAlreadyAdded++;
                                                }
                                            }
                                        }
                                    }
                                    foreach (var itemRating in Model.CoffeeRatingsList)
                                    {
                                        foreach (var itemUser in Model.Users)
                                        {
                                            var ratingsExistsForUser = Model.CoffeeRatingsList.Where(x => x.UserID == itemUser.UserID &&
                                            x.CoffeeID == item.CoffeeID);
                                            if (ratingsExistsForUser.Count() > 0)
                                            {
                                                if (itemUser.UserID == itemRating.UserID)
                                                {
                                                    if (itemRating.CoffeeID == item.CoffeeID)
                                                    {
                                                        <td>
                                                            <input value="@itemRating.Experience" class="starRating rating-loading" data-size="xs">
                                                        </td>
                                                        <td>@itemRating.Experience</td>
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (emptyExperienceAlreadyAdded != 1)
                                                {
                                                    <td>
                                                        <input value="0" class="starRating rating-loading" data-size="xs">
                                                    </td>
                                                    <td>0</td>
                                                    emptyExperienceAlreadyAdded++;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            <td>
                                <input value="@item.AvgTaste" class="starRating rating-loading" data-size="xs">
                            </td>
                            <td>
                                @item.AvgTaste
                            </td>
                            <td>
                                <input value="@item.AvgRating" class="starRating rating-loading" data-size="xs">
                            </td>
                            <td>
                                @item.AvgRating
                            </td>
                            <td>
                                <a asp-page="/View" asp-route-Id="@item.CoffeeID">View</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="modal fade" id="AddCoffeeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Add coffee place</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div lcass="form-group">
                        <div class="row">
                            <div class="col-12">
                                <label asp-for="NewCoffee.CoffeeName" class="control-label"></label>
                                <input asp-for="NewCoffee.CoffeeName" class="form-control NewCoffeeCoffeeName"
                                    required="required" type="text" />
                                <span asp-validation-for="NewCoffee.CoffeeName" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="button" value="Add" class="btn btn-primary btnAddCoffee" />
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="ValidationCheck" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Check it again bud</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <p class="errorText"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
<script type="text/javascript">
    $(document).ready(function () {
        $('.form-control-chosen').chosen();
        $(".starRating").rating({
            displayOnly: true,
            step: 0.5,
            showCaption: false,
            showClear: false,
            theme: 'krajee-svg'
        });
        dataTableInitialise();
    });
    $(".btnAddCoffee").on("click", function () {
        var pathname = window.location.pathname;
        var CoffeeName = $(".NewCoffeeCoffeeName").val();
        $.ajax({
            dataType: 'json',
            url: pathname,
            type: 'POST',
            data: {
                CoffeeName: CoffeeName
            },
            headers: {
                RequestVerificationToken:
                    $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (Number.isInteger(response)) {
                    window.location.replace("CoffeePot/View?Id=" + response);
                } else {
                    $("#ValidationCheck").modal();
                    $(".errorText").text(response);
                }
            },
            error: function () {
                alert("AJAX Request Failed, Contact Support");
            }
        });
    });
    window.addEventListener("resize", function () {
        dataTableInitialise();
    });
    function dataTableInitialise() {
        $('#CoffeeTable').dataTable({
            "aoColumns": [
                { "sType": "html" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "num" },
                { "sType": "html" }
            ],
            "columnDefs": [
                { responsivePriority: 1, "targets": 0 },
                { responsivePriority: 5, "targets": 1, "iDataSort": 2 },
                { responsivePriority: 15, "targets": 2, className: "never" },
                { responsivePriority: 6, "targets": 3, "iDataSort": 4 },
                { responsivePriority: 16, "targets": 4, className: "never" },
                { responsivePriority: 7, "targets": 5, "iDataSort": 6 },
                { responsivePriority: 15, "targets": 6, className: "never" },
                { responsivePriority: 8, "targets": 7, "iDataSort": 8 },
                { responsivePriority: 15, "targets": 8, className: "never" },
                { responsivePriority: 3, "targets": 9, "iDataSort": 10 },
                { responsivePriority: 15, "targets": 10, className: "never" },
                { responsivePriority: 4, "targets": 11, "iDataSort": 12 },
                { responsivePriority: 15, "targets": 12, className: "never" },
                { responsivePriority: 2, orderable: false, "targets": 13 }
            ],
            "pagingType": "numbers",
            "paging": false,
            "responsive": true,
            "order": [0, 'desc'],
            "destroy": true,
            "language": {
                "emptyTable": "No data available in table"
            },
            stateSave: true
        });
    }
</script>
}
